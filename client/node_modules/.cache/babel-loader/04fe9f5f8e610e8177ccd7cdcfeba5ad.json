{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCYOdPJrXTyeTaUHqZpiYGG5VUFfjpWkR4\",\n  authDomain: \"test-c2df9.firebaseapp.com\",\n  databaseURL: \"https://test-c2df9.firebaseio.com\",\n  projectId: \"test-c2df9\",\n  storageBucket: \"test-c2df9.appspot.com\",\n  messagingSenderId: \"1031351005157\",\n  appId: \"1:1031351005157:web:d92ee180e8991c9b4e890c\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  console.log(\"before Auth\");\n  if (!userAuth) return;\n  console.log(\"After Auth \" + userAuth.uid);\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //const userRef = firestore.doc('users/1234rftf');\n\n  const snapShot = await userRef.get();\n  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocument = (collectionkey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionkey); //console.log(collectionRef);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //console.log(newDocRef);\n\n    batch.set(newDocRef, obj);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["D:/Sweta/SelfLearning/React/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","console","log","uid","userRef","firestore","doc","snapShot","get","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","addCollectionAndDocument","collectionkey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,4BAFD;AAGXC,EAAAA,WAAW,EAAE,mCAHF;AAIXC,EAAAA,SAAS,EAAE,YAJA;AAKXC,EAAAA,aAAa,EAAE,wBALJ;AAMXC,EAAAA,iBAAiB,EAAE,eANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;AAUE,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3EC,EAAAA,OAAO,CAACC,GAAR,CAAa,aAAb;AACA,MAAG,CAACH,QAAJ,EAAc;AACdE,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAgBH,QAAQ,CAACI,GAAtC;AAEA,QAAMC,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQP,QAAQ,CAACI,GAAI,EAApC,CAAhB,CAL2E,CAO3E;;AAEA,QAAMI,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;AAEAP,EAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;;AAEA,MAAI,CAACA,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBZ,QAA7B;AACA,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMT,OAAO,CAACU,GAAR,CAAY;AAACJ,QAAAA,WAAD;AAAcC,QAAAA,KAAd;AAAqBC,QAAAA,SAArB;AAAgC,WAAGZ;AAAnC,OAAZ,CAAN;AACD,KAFD,CAEE,OAAMe,KAAN,EAAa;AACbd,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCa,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOZ,OAAP;AACD,CAzBM;AA2BPf,QAAQ,CAAC4B,aAAT,CAAuB3B,MAAvB;AAEA,OAAO,MAAM4B,wBAAwB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACvE,QAAMC,aAAa,GAAGhB,SAAS,CAACiB,UAAV,CAAqBH,aAArB,CAAtB,CADuE,CAEvE;;AAEA,QAAMI,KAAK,GAAGlB,SAAS,CAACkB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AAC1B,UAAMC,SAAS,GAAGL,aAAa,CAACf,GAAd,EAAlB,CAD0B,CAE1B;;AACAiB,IAAAA,KAAK,CAACT,GAAN,CAAUY,SAAV,EAAqBD,GAArB;AACD,GAJD;AAKD,CAVM;AAYP,OAAO,MAAME,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMtB,SAAS,GAAGhB,QAAQ,CAACgB,SAAT,EAAlB;AAEP,MAAMuB,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AAEAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAG;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAevC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCYOdPJrXTyeTaUHqZpiYGG5VUFfjpWkR4\",\r\n    authDomain: \"test-c2df9.firebaseapp.com\",\r\n    databaseURL: \"https://test-c2df9.firebaseio.com\",\r\n    projectId: \"test-c2df9\",\r\n    storageBucket: \"test-c2df9.appspot.com\",\r\n    messagingSenderId: \"1031351005157\",\r\n    appId: \"1:1031351005157:web:d92ee180e8991c9b4e890c\"\r\n  };\r\n\r\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    console.log (\"before Auth\");\r\n    if(!userAuth) return;\r\n    console.log (\"After Auth \" + userAuth.uid);\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n    //const userRef = firestore.doc('users/1234rftf');\r\n\r\n    const snapShot = await userRef.get();\r\n\r\n    console.log(snapShot);\r\n\r\n    if (!snapShot.exists) {\r\n      const {displayName, email} = userAuth;\r\n      const createdAt = new Date();\r\n\r\n      try {\r\n        await userRef.set({displayName, email, createdAt, ...additionalData});\r\n      } catch(error) {\r\n        console.log(\"error creating user\", error.message);\r\n      }\r\n    }\r\n\r\n    return userRef;\r\n  }\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const addCollectionAndDocument = (collectionkey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionkey);\r\n    //console.log(collectionRef);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n      const newDocRef = collectionRef.doc();\r\n      //console.log(newDocRef);\r\n      batch.set(newDocRef, obj);\r\n    })\r\n  };\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  provider.setCustomParameters({prompt : 'select_account'});\r\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\n  export default firebase;\r\n\r\n"]},"metadata":{},"sourceType":"module"}